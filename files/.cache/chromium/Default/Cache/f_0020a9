function Schedule(id, entries, primary, offerings, sections, finals) {
  this.id = id;
  this.entries = entries;
  this.finals = finals || [];
  this.primary = primary || false;
  this.offerings = offerings || [];
  this.sections = sections;
  this.hidden_entries = [];
  
  for (var i = 0; i < this.entries.length; i++) {
    var entry = this.entries[i];
    if (entry.start_time == entry.end_time) {
      this.hidden_entries.push(entry);
    } else if (entry.extra_times) {
      for (var x = 0; x < entry.extra_times.length; x++) {
        if (entry.extra_times[x].start == entry.extra_times[x].end) {
          this.hidden_entries.push(entry);
          break;
        }
      }
    }
  }

  this.render = function(render_final, all_finals, parent) {
    parent.empty();
    this.render_into(parent);
    if (!!render_final) {
      this.render_finals(all_finals, parent);
    }
  };
  
  this.render_into = function(parent) {
    // Config.
    var hours_width = 50;
    var half_hour_height = 20;
    var days_height = 16;

    // Initialize.
    this.calculateGrid();
    var width = parent.width();
    var total_height = 0; // Running height.
    var outer_div = $('<div style="position: relative;"></div>');
    
    if (this.start < this.end) {
      // Calculate how many resolutions go into an hour and half hour, and find
      // closest hour to start/end.
      var hourResolution = 60 / this.resolution;
      var halfHourResolution = hourResolution / 2;
      var hourStart = Math.floor(this.start);
      var hourEnd = Math.ceil(this.end);
      while (hourStart % hourResolution != 0) {
        hourStart--;
      }
      while (hourEnd % hourResolution != 0) {
        hourEnd++;
      }
      
      // Initialize extra heights to have room to display all text.
      var extra_heights = new Array(hourEnd - hourStart);
      for (var i = 0; i < extra_heights.length; i++) {
        extra_heights[i] = 0;
      }
      
      // Figure out how many days we have in the schedule.
      var start_day = -1;
      var end_day = -1;
      for (var d = 0; d <= 6; d++) {
        if (this.dayMask & (1 << d)) {
          if (start_day == -1) {
            start_day = d;
          }
          end_day = d;
        }
      }
      var num_days = end_day - start_day + 1;
      
      // Calculate width of each day in the schedule.
      // parseInt() truncates, we want to round down to not exceed total width.
      var day_width = parseInt((width - hours_width - 1) / num_days);
      
      // Place sections temporarily hidden in body, to calculate their height.
      for (var e = 0; e < this.entries.length; e++) {
        var entry = this.entries[e];
        entry.elements = [];
        
        // Get all days/times for this section.
        var times = [];
        if (entry.extra_times) {
          // Copy times.
          times = times.concat(entry.extra_times);
        }
        time = {};
        time.days = entry.days;
        time.start = entry.start_time;
        time.end = entry.end_time;
        time.loc = entry.location;
        time.display_string = entry.display_string;
        times.push(time);
        
        // For each day/time.
        for (var t = 0; t < times.length; t++) {
          var start = this.timeToIndex(times[t].start);
          var end = this.timeToIndex(times[t].end);
          if (start == end){
            continue;
          }
          var day_mask = this.getDayMask(times[t].days);
          
          for (var d = start_day; d <= end_day; d++) {
            if (day_mask & (1 << d)) {
              // Find collisions with other sections along the full height of this one.
              var num_sections = 1;
              var available_offsets = 0;
              for (var c = start; c < end; c++) {
                num_sections = Math.max(num_sections, this.sectionsPerSlot[d][c][0]);
                available_offsets |= this.sectionsPerSlot[d][c][1];
              }
              var offset = 0;
              while (available_offsets & 1 != 0) {
                available_offsets = available_offsets >> 1;
                offset++;
              }
              for (var c = start; c < end; c++) {
                this.sectionsPerSlot[d][c][1] |= 1 << offset;
              }
              
              // Calculate offsets and dimensions.
              var section_width = parseInt(day_width / num_sections);
              var left = hours_width + (d - start_day) * day_width + 1;
              var top = parseInt((start - hourStart) / halfHourResolution) * half_hour_height + 1;
              var height = parseInt((end - start) / halfHourResolution * half_hour_height) - 5;
              var extra_width = 0;
              if (d == end_day) {
                extra_width = parseInt((width - left - day_width) / num_sections);
              }
              left += offset * section_width;
              
              // Add content to section box in schedule.
              var content = [];
              if (!entry.custom) {
                content.push('<a href="/explore/course/');
                content.push(entry.course_id);
                content.push('/">');
              }
              content.push(times[t].display_string);
              if (!entry.custom) {
                content.push('</a>');
              }
              if (!entry.custom && times[t].loc) {
                content.push('<div class="location">', times[t].loc, '</div>');
              }
              
              var div = ['<div style="position: absolute; ',
                                     'overflow: hidden; ',
                                     'visibility: hidden; ',
                                     'top: ', top, 'px; ',
                                     'left: ', left, 'px; ',
                                     'width: ', (section_width - 5 + extra_width), 'px; ',
                                     'z-index: 100;',
                                     'border: 1px solid #', this.entries[e].border_color, '; ',
                                     'background-color: #', this.entries[e].color, ';" class="schedule-section-wrapper">',
                         '<div class="schedule-section-content">', content.join(''), '</div></div>'];
              div = $(div.join(''));
              $(document.body).append(div);
              
              // Calculate any extra height we need to be able to display text.
              var real_height = $(div).outerHeight();
              if (real_height > height) {
                var diff = real_height - height;
                var len = end - start;
                for (var tt = start; tt < end; tt++) {
                  extra_heights[tt - hourStart] = Math.max(extra_heights[tt - hourStart],
                                                           parseInt(diff / len) + (tt == start ? diff % len : 0));
                }
              }
              
              // Set the height to what we intended originally, and we'll pad it later with extra hour heights.
              div.height(height);
              this.entries[e].elements.push([div, start, end]);
            }
          }
        }
      }
      
      // Calculate running sum of extra heights at each resolution.
      var sum_extra_heights = new Array(hourEnd - hourStart);
      for (var i = 0; i < sum_extra_heights.length; i++) {
        sum_extra_heights[i] = extra_heights[i];
        if (i > 0) {
          sum_extra_heights[i] += sum_extra_heights[i-1];
        }
      }
      
      // Add half-hour and hour markings.
      for (var i = hourStart; i < hourEnd; i++) {
        if (i % halfHourResolution == 0) {
          // Calculate extra height to add to this half hour.
          var extra_height = 0;
          for (var j = i; j < i + halfHourResolution; j++) {
            if (j < hourEnd) {
              extra_height += extra_heights[j - hourStart];
            }
          }
          
          var text = '';
          var cls = 'schedule-half-hour';
          var height = half_hour_height + extra_height - 1;
          if (i % hourResolution == 0) {
            text = this.indexToTimeString(i);
            cls += ' schedule-hour';
          }
          var div = ['<div class="', cls, '" style="height: ', height, 'px; z-index: 50;">',
                       '<div class="schedule-hour-text" style="width: ', (hours_width - 1), 'px; height: ', (height - 2), 'px;">',
                         text, '</div>',
                     '</div>'];
          outer_div.append($(div.join('')));
          total_height += half_hour_height;
        }
      }
      
      // Add sections to actual schedule.
      for (var i = 0; i < this.entries.length; i++){
        var elements = this.entries[i].elements;
        for (var e = 0; e < elements.length; e++) {
          var el = elements[e][0];
          var start = elements[e][1];
          var end = elements[e][2];
          
          // Calculate extra height and top to add to this section.
          var extra_height = sum_extra_heights[end - hourStart - 1] - (start > this.start ? sum_extra_heights[start - hourStart - 1] : 0);
          var extra_top = start > this.start ? sum_extra_heights[start - hourStart - 1] : 0;
          if (extra_height > 0 || extra_top > 0) {
            el.height(el.height() + extra_height);
            
            var top = el.css('top');
            top = parseInt(top.substring(0, top.length - 2));
            top += extra_top;
            el.css('top', top + 'px');
          }
  
          // Remove from body and attach to schedule.
          el.detach();
          el.css('visibility', '');
          outer_div.append(el);
        }
      }
      
      // Add vertical lines for days.
      for (var d = 0; d < num_days - 1; d++) {
        var left = hours_width + d * day_width;
        var div = ['<div style="position: absolute; ',
                               'top: 0;',
                               'left: ', left, 'px; ',
                               'width: ', (day_width - 1), 'px; ',
                               'height: ', total_height + sum_extra_heights[this.end - 1 - this.start], 'px; ',
                               'z-index: 60;',
                   '" class="schedule-day-vertical"></div>'];
        outer_div.append($(div.join('')));
      }
      
      // Display row of days on top of the schedule.
      var days = $('<div style="position: relative; height: ' + (days_height + 3) + 'px;"></div>');
      for (var d = start_day; d <= end_day; d++) {
        var left = hours_width + (d - start_day) * day_width;
        var extra_width = 0;
        if (d == end_day) {
          extra_width = width - left - day_width - 1;
        }
        var div = ['<div style="position: absolute; ',
                               'top: 0;',
                               'left: ', left, 'px; ',
                               'width: ', (day_width - 1) + extra_width, 'px; ',
                               'height: ', days_height, 'px; ',
                               'z-index: 60;',
                   '" class="schedule-day-header">', this.bitToDayString(1 << d), '</div>'];
        days.append($(div.join('')));
      }
      parent.append(days);
      
      // Add the schedule itself to the DOM.
      var wrapper = $('<div class="schedule-wrapper" style="border-width: 1px 1px 0 1px; border-style: solid; border-color: #ddd;"></div>');
      wrapper.append(outer_div);
      parent.append(wrapper);
    }
    
    // Show a warning if there are any unscheduled sections.
    if (this.hidden_entries.length > 0) {
      var warning = []
      warning.push('<div class="finals"><h3>TBA Sections</h3><div class="warning" style="font-size: 1.1em;">',
            'The following sections have at least one meeting time which has not been scheduled yet:<br/>');
      for (var j = 0; j < this.hidden_entries.length; j++) {
        if (j > 0) {
          warning.push('<br/>');
        }
        warning.push(this.hidden_entries[j].display_string.replace('<br/>', ' '));
      }
      warning.push('</div></div>');
      parent.append($(warning.join('')));
    }
  };
  
  this.render_finals = function(all_finals, parent) {
    var final_ids = [];
    all_finals = all_finals || {};
    for (var f_id in all_finals) {
      final_ids.push(f_id);
    }
    final_ids.sort(function(a, b) {
      a = all_finals[a];
      b = all_finals[b];
      if (a.schedule_start_time == b.schedule_start_time) {
        return 0;
      }
      return a.schedule_start_time < b.schedule_start_time ? -1 : 1;
    });

    var current_date = "";
    var dates = [];
    var times = {};
    var unscheduled_finals = [];
    var has_scheduled_finals = false;
    for(var i=0;i<final_ids.length;i++){
      var f_id = final_ids[i];
      var f = all_finals[f_id];
      if (f.schedule_start_time.length > 0) {
      	var date = f.schedule_start_time.split(" ")[0];
      	date = date.substring(5)
      	var start_time = this.timeToIndex(f.schedule_start_time.split(" ")[1].replace(':', ''));
      	var end_time = this.timeToIndex(f.schedule_end_time.split(" ")[1].replace(':', ''));
      	var time = start_time + "-" + end_time;
      	var existing_date = false;
      	for(var j=0;j<dates.length;j++){
      	  if(date == dates[j]){
      	    existing_date = true;
      	    break;
      	  }
      	}
      	if(!existing_date){
      	  dates.push(date);
      	}
      	if(!(time in times)){
      	  times[time] = {};
      	}
      	if (f_id in this.finals){
      	  times[time][date] = this.finals[f_id];
      	  has_scheduled_finals = true;
      	}
      } else {
        if (f_id in this.finals){
          for (var j=0;j<this.finals[f_id].length;j++){
            unscheduled_finals.push(this.finals[f_id][j]);
          }
        }
      }
    }

    var sorted_time_keys = [];
    for (var time_key in times) {
      sorted_time_keys.push(time_key);
    }
    sorted_time_keys.sort(function(a, b) {
      a = parseInt(a.split('-')[0]);
      b = parseInt(b.split('-')[0]);
      if (a == b) {
        return 0;
      }
      else {
        return a < b ? -1 : 1;
      }
    });
    
    var table = ['<div class="finals"><h3>Finals</h3>'];
    if (has_scheduled_finals) {
      table.push("<table><tr><th></th>");
      for(var i=0;i<dates.length;i++){
        table.push('<th class="final-date-cell">', dates[i], "</th>");
      }
      table.push("</tr>");
      for(var i=0;i<sorted_time_keys.length;i++){
        var t = times[sorted_time_keys[i]];
        var time_string = this.indexToTimeString(sorted_time_keys[i].split('-')[0]) + " - " + this.indexToTimeString(sorted_time_keys[i].split('-')[1]);
        table.push('<tr><td class="final-time-cell">', time_string, "</td>");
        for(var j=0;j<dates.length;j++){
        	if(dates[j] in t){
        	  table.push('<td class="final-cell" style="background-color: #', t[dates[j]][0].color ,';">');
        	  for(var k=0;k<t[dates[j]].length;k++){
        	    if (k > 0) {
        	      table.push("<br/>")
        	    }
        	    table.push(t[dates[j]][k].display_string);
        	  }
        	  table.push("</td>");
        	} else {
        	  table.push('<td class="final-cell"></td>');
        	}
        }
        table.push("</tr>");
      }
      table.push("</table>");
    }
    for(var i=0;i<unscheduled_finals.length;i++) {
      table.push('<p><span style="padding: 0.25em; background-color: #', unscheduled_finals[i].color, '; border: 1px solid #', unscheduled_finals[i].border_color, '">', unscheduled_finals[i].display_string, "</span> has a final (but with an unknown time).</p>");
    }
    
    if (!has_scheduled_finals && unscheduled_finals.length == 0){
      table.push('<p>Hooray, this schedule has no finals!</p>');
    }
    table.push("</div>");
    parent.append($(table.join('')));
  };
  
  this.calculateResolution = function() {
    this.resolution = 30;
    var resolutions = [30, 15, 10, 5, 1];
    for (var e = 0; e < this.entries.length; e++) {
      var entry = this.entries[e];
      if (entry.start_time == entry.end_time) {
        continue;
      }
      
      var times = [parseInt(entry.start_time.substring(2, 4), 10),
                   parseInt(entry.end_time.substring(2, 4), 10)];
      if (entry.extra_times) {
        for (var x = 0; x < entry.extra_times.length; x++) {
          times.push(parseInt(entry.extra_times[x].start.substring(2, 4), 10),
                     parseInt(entry.extra_times[x].end.substring(2, 4), 10));
        }
      }
      
      for (var t = 0; t < times.length; t++) {
        for (var r = 0; r < resolutions.length; r++) {
          if (times[t] % resolutions[r] != 0) {
            resolutions.splice(r, 1);
            r -= 1;
          }
        }
      }
      
      if (resolutions.length == 1) {
        break;
      }
    }
    
    this.resolution = resolutions[0];
    this.resPerHour = 60 / this.resolution;
    this.numSlots = 24 * this.resPerHour;
  };

  this.calculateGrid = function() {
    // Figure out highest resolution (in minutes).
    this.calculateResolution();
    
    // initialize
    this.start = this.numSlots - 1;
    this.end = 0;
    this.dayMask = this.getDayMask('MTWRF'); // default to weekdays
    this.sectionsPerSlot = new Array(7);
    for (var i = 0; i < 7; i++) {
      var times = new Array(this.numSlots);
      for (var j = 0; j < times.length; j++) {
        times[j] = [0, 0];
      }
      this.sectionsPerSlot[i] = times;
    }
    
    for (var e = 0; e < this.entries.length; e++){
      var times = [];
      if (this.entries[e].extra_times) {
        // Copy times.
        times = times.concat(this.entries[e].extra_times);
      }
      time = {};
      time.days = this.entries[e].days;
      time.start = this.entries[e].start_time;
      time.end = this.entries[e].end_time;
      times.push(time);
      
      for (var t = 0; t < times.length; t++) {
        var localStart = this.timeToIndex(times[t].start);
        var localEnd = this.timeToIndex(times[t].end);
        if (localStart == localEnd) {
          continue;
        }
        if (localStart < this.start) {
          this.start = localStart;
        }
        if (localEnd > this.end) {
          this.end = localEnd;
        }
        var localDayMask = this.getDayMask(times[t].days);
        for (var i = localStart; i < localEnd; i++) {
          for (var d = 0; d <= 6; d++) {
            if (localDayMask & (1 << d)) {
              this.sectionsPerSlot[d][i][0] += 1;
            }
          }
        }
        this.dayMask |= localDayMask;
      }
    }
  };

  this.timeToIndex = function(timeStr) {
    return parseInt(timeStr.substring(0, 2), 10) * this.resPerHour +
        parseInt(timeStr.substring(2, 4), 10) / this.resolution;
  };

  this.indexToTimeString = function(index) {
    var hour = parseInt(index / this.resPerHour);
    var minute = index % this.resPerHour * this.resolution;
    var normalized_hour = hour > 12 ? hour - 12 : hour;
    return normalized_hour + ":" +
        (minute < 10 ? "0" + minute : minute) + (hour >= 12 ? "pm" : "am");
  };

  this.dayToBit = function(day) {
    switch (day) {
      case 'U': return 1;
      case 'M': return 2;
      case 'T': return 4;
      case 'W': return 8;
      case 'R': return 16;
      case 'F': return 32;
      case 'S': return 64;
      default: return 0;
    }
  };

  this.bitToDayString = function(bit) {
    switch (bit) {
      case 1: return 'Sunday';
      case 2: return 'Monday';
      case 4: return 'Tuesday';
      case 8: return 'Wednesday';
      case 16: return 'Thursday';
      case 32: return 'Friday';
      case 64: return 'Saturday';
      default: return '';
    }
  };

  this.getDayMask = function(dayStr) {
    var mask = 0;
    for (var i = 0; i < dayStr.length; i++) {
      mask |= this.dayToBit(dayStr[i]);
    }
    return mask;
  };
}
