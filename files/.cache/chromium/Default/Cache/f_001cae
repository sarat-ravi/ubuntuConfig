var generate = {
  candidate_schedules: [],
  cached_course_data: {},
  all_finals: {},
  days: {'Mon': 'M', 'Tues': 'T', 'Wed': 'W', 'Thurs': 'R', 'Fri': 'F', 'Sat': 'S', 'Sun': 'U'},
  
  init: function() {
    course_list.render();
    
    // Course help tooltip.
    $('#course-help-icon').qtip({
      content: "Click on a course's \"sections\" link to pick which sections you'd like us to choose from when creating your schedule. All lectures and sections are selected by default.",
      show: { delay: 50, effect: { length: 0 } },
      hide: { effect: { length: 0 } },
      position: { corner: { target: 'rightMiddle', tooltip: 'leftMiddle' } },
      style: { name: 'blue', tip: 'leftMiddle', border: { width: 1, radius: 5 } }
    });
    
    // Set up course search
    course_search(function(course_id, department_code, course_identifier) {
      course_list.addCourse(course_id);
    });
  },
  
  toggle_options: function() {
    var options = $('#advanced-options');
    var button = $('#advanced-options-button');
    options.toggle();
    if (options.is(':visible')) {
      button.css('background-image', 'url(' + media_url + 'images/icons/arrow_down.png)');
    }
    else {
      button.css('background-image', 'url(' + media_url + 'images/icons/arrow_right.png)');
    }
  },
  
  clear_schedule_area: function() {
    $("#schedule-pane-bottom").empty();
    course_list.last_viewed_clc = null;
  },
  
  populate_schedule_area: function(html) {
    $("#schedule-pane-bottom").html(html);
    course_list.last_viewed_clc = null;
  },

  display_course: function(data, sections, course_list_course_id) {
    if (data && data.course && generate.cached_course_data[data.course.id] === undefined) {
      generate.cached_course_data[data.course.id] = data;
    }
    if(data && data.status && data.status == "success") {
      course_list.last_viewed_clc = course_list_course_id;
      checked = false;//data.selected ? ' checked="checked"' : '';
      var table = [
        '<h3>', data.course.department.code, ' ', data.course.identifier, ' - ', data.course.title, '</h3>',
        'Choose which sections you want us to pick from when creating your schedule.<br/>',
        //'<div class="button button-margin" onclick="return generate.generate();">Save and Return to Schedules</div>',
        "<div class=\"button button-margin\" onclick=\"return generate.populate_schedule_area('<h3>", data.course.department.code, ' ', data.course.identifier, ' - ', data.course.title, "</h3><div class=&quot;success&quot;>Sections saved successfully.</div>');\">Save</div>",
        '<p>Select <a href="#" onclick="return generate.checkAll(',
        course_list_course_id,
        ')">All</a>, <a href="#" onclick="return generate.checkNone(',
        course_list_course_id,
        ')">None</a>, <a href="#" onclick="return generate.checkOpenSeats(',
        course_list_course_id,
        ')">With Open Seats</a></p>',
        '<table class="sections"><tr>',
        '<th></th>',
        (_show_section_column ? '<th>Section</th>' : ''),
        '<th>', _text_ccn, '</th><th>Time</th><th>Location</th>',
        '<th>Instructor</th><th>', _text_cap_units, '</th>',
        '<th>Enrolled</th>'];
      if (_show_section_waitlist) {
        table.push('<th>Waitlist</th>');
      }
      table.push('<th>Note</th></tr>');
      for(var i=0;i<data.sections.length;i++){
        table.push('<tr><td class="align-center"><input class="section-checkbox');
        table.push((data.sections[i].available_seats > 0) ? ' has_available_seats' : ' no_available_seats');
        table.push('" type="checkbox" onclick="generate.checkboxClicked(this, ');
        table.push(course_list_course_id);
        table.push(', ');
        table.push(data.sections[i].id);
        table.push(');"');
        if(sections[data.sections[i].id]) {
          table.push(' checked="checked"');
        }
        table.push('/></td>');
        if (_show_section_column) {
          table.push('<td>');
          table.push(data.sections[i].section);
          table.push(' ');
          table.push(data.sections[i].type);
          table.push('</td>');
        }
        table.push('<td>');
        table.push(data.sections[i].ccn);
        table.push('</td><td>');
        table.push(data.sections[i].days);
        table.push(' ');
        if(data.sections[i].short_time) {
          table.push(data.sections[i].short_time);
        }
        if (data.sections[i].extra_times != null) {
          for (var j = 0; j < data.sections[i].extra_times.length; j++) {
            table.push("<br/>");
            table.push(data.sections[i].extra_times[j].days, ' ', data.sections[i].extra_times[j].time);
          }
        }
        table.push('</td><td>');
        table.push(data.sections[i].location);
        if (data.sections[i].extra_times != null) {
          for (var j = 0; j < data.sections[i].extra_times.length; j++) {
            table.push("<br/>");
            if (data.sections[i].extra_times[j].loc) {
              table.push(data.sections[i].extra_times[j].loc);
            }
          }
        }
        table.push('</td><td>');
        instructors = [];
        for(var m=0;m<data.sections[i].instructors.length;m++) {
          var inst = data.sections[i].instructors[m];
          var title = [
            ' title="',
            'Overall ', inst.overall_medium,
            ' Assignments ', inst.assignments_small,
            ' Exams ', inst.exams_small,
            ' Helpfulness ', inst.helpfulness_small,
            ' Enthusiasm ', inst.enthusiasm_small,
            '"'
          ].join('');
          instructors.push(
            ['<span class="nowrap rating-details-qtip"', title, '>',
             '<a href="/ratings/view/instructor/', data.sections[i].instructors[m].id, '/">', inst.overall_small, '</a> ',
             '<a href="/ratings/view/instructor/', data.sections[i].instructors[m].id, '/">', inst.name, '</a>',
             '</span>'
            ].join(''));
        }
        table.push(instructors.join('; '));
        table.push('</td><td class="align-center">');
        table.push(data.sections[i].units);
        table.push('</td><td class="align-right">');
        table.push(data.sections[i].enrolled);
        table.push('/');
        table.push(data.sections[i].limit);
        table.push('</td>');
        if (_show_section_waitlist) {
          table.push('<td class="align-right">');
          table.push(data.sections[i].waitlist);
          table.push('</td>');
        }
        table.push('<td class="align-center">');
        if (data.sections[i].note){
          table.push('<a class="note" href="" onclick="return false;" title="');
          table.push(data.sections[i].note.replace('"', ''));
          table.push('">[Note]</a>');
        }
        table.push('</td></tr>');
      }
      table.push('</table>');
      table.push("<div class=\"button button-margin\" onclick=\"return generate.populate_schedule_area('<h3>", data.course.department.code, ' ', data.course.identifier, ' - ', data.course.title, "</h3><div class=&quot;success&quot;>Sections saved successfully.</div>');\">Save</div>"); 
      $("#schedule-pane-bottom").html(table.join(''));
      
      $('.rating-details-qtip').each(function(i, e) {
        $(e).qtip({
          position: { corner: { tooltip: 'bottomMiddle', target: 'topMiddle' } },
          style: { name: 'light', tip: 'bottomMiddle', border: { width: 1, radius: 5 }, width: { max: 500 } },
          show: { delay: 0, effect: { length: 0 } },
          hide: { effect: { length: 0 } }
        });
      });
    }
    else {
      if (data && data.status) {
        var html = [
          '<h3>Course Info</h3>',
          data.message
        ];
        $("#schedule-pane-bottom").html(html.join(''));
      }
      else {
        $("#schedule-pane-bottom").html("<br/>Sorry, we're having trouble getting data for that class. Please let us know about the problem.");
      }
    }
  },
  
  generate: function() {
    form = document.forms['generate-options'];
    generate.setIndicator();
    url = "generate/?sort=" + $("input[name='sort']:checked").val();
    if (form.start_time.value) {
      url += "&start_time=" + (form.start_time.value);
    }
    if (form.end_time.value) {
      url += "&end_time=" + (form.end_time.value);
    }
    
    if(window.pageTracker) {
      pageTracker._trackEvent("Generate", "Sort", $("input[name='sort']:checked").val());
      pageTracker._trackEvent("Generate", "Anon", anon ? "anon" : "user");
      pageTracker._trackEvent("Generate", "Start Time", form.start_time.value ? form.start_time.value : "None");
      pageTracker._trackEvent("Generate", "End Time", form.end_time.value ? form.end_time.value : "None");
    }
    
    $.post(url, {},
           function(data){
             if (data && data.status == "success") {
               var schedules = data.schedules;
               generate.all_finals = data.finals;
               candidate_schedules = [];
               if (schedules.length > 0) {
                 display_count = schedules.length;
                 
                 list = [];
                 list.push('<h3>Schedules</h3><div id="generated-schedules"><div id="schedule-tabs"><div>');
                 if(data.not_processed > 0) {
                   list.push('<div class="warning">Warning: Not all possible schedules were processed. Please try deselecting some sections (and making your group list less complicated) so we can generate the best possible schedule for you.</div>');
                 }
                 list.push('<ul id="tab-headers" class="pagination"></ul><div id="candidate-schedule-area" class="clear-left"></div>');
                 for(var i=0;i<schedules.length;i++){
                   var candidate_schedule = new Schedule(0, schedules[i].entries, null, null, null, schedules[i].finals);
                   candidate_schedules.push(candidate_schedule);
                 }
                 list.push('</div></div>');
                 
                 // Stats
                 list.push('<div class="help-text"><p style="margin-top: 1.6em;"><strong>Info</strong></p>',
                           '<p>Out of ',
                           data.num_processed + data.not_processed,
                           ' potential schedules, ',
                           data.num_processed - data.count,
                           ' were rejected due to conflicts'
                          );
                 if (data.not_processed > 0) {
                   list.push(' and ', data.not_processed, ' were not processed (request too large)');
                 }
                 list.push('. ', data.elapsed, ' seconds elapsed.</p>');
                 list.push('Displaying ', display_count, ' out of ', data.count, ' valid schedules. ', '</div>');
                 
                 $("#schedule-pane-bottom").html(list.join(''));
                 generate.paginate(0);
               } else {
                 if(data.not_processed > 0) {
                   $("#schedule-pane-bottom").html('<h3>Schedules</h3><div class="error">Sorry, your request (' + data.not_processed + ' potential schedules) was too large. Please try deselecting some sections (and making your group list less complicated) so we can generate the best possible schedule for you.</div>');
                 } else {
                   if (data.collisions.length > 0) {
                     if (data.collisions.length > 1) {
                       data.collisions[data.collisions.length-1] = "and " + data.collisions[data.collisions.length-1]
                     }
                     $("#schedule-pane-bottom").html(
                         '<h3>Schedules</h3><div class="error">We couldn\'t generate any schedules due to ' +
                         'time conflicts between ' + data.collisions.join(', ') +
                         '. Please remove or change one of these courses or events and try again.</div>');
                   }
                   else {
                     $("#schedule-pane-bottom").html('<h3>Schedules</h3><div class="error">Sorry, we couldn\'t generate any valid schedules.</div>');
                   }
                 }
               }
             } else {
               if (data && data.errors){
                 errors = ['<div class="error"><ul>'];
                 for (var i=0;i<data.errors.length;i++){
                   errors.push('<li>');
                   errors.push(data.errors[i]);
                   errors.push('</li>');
                 }
                 errors.push('</ul></div>');
                 $("#schedule-pane-bottom").html(errors.join(''));
               } else {
                 $("#schedule-pane-bottom").html('<div class="error">An unknown error has occured.</div>');
               }
             }
           });
    return false;
  },
  
  paginate: function(current) {
    $("#tab-headers").pagination(
        candidate_schedules.length,
        {
         current_page: current,
         items_per_page: 1,
         num_edge_entries: 0,
         callback: function(i, paginationContainer) {
           var candidate_schedule = candidate_schedules[i];
           list = [];
           list.push('<div class="meta"></div><div id="schedule-wrapper"></div>');
           $("#candidate-schedule-area").html(list.join(''));
           candidate_schedule.render(_show_finals, generate.all_finals, $('#schedule-wrapper'));
           generate.update_meta(i);
           return false;
         }
        }
    );
  },
  
  hideSchedule: function(i) {
    var is_last = (i == candidate_schedules.length - 1);
    
    // Remove this schedule.
    candidate_schedules.splice(i, 1);
    
    // Update pagination.
    if (is_last) {
      i--;
    }
    generate.paginate(i);
  },
  
  setIndicator: function(id) {
    id = id || "#schedule-pane-bottom";
    $(id).html('<img src="' + media_url + 'images/ajax-loader.gif" />');
  },
  
  update_meta: function(schedule_id) {
    var meta = $('#candidate-schedule-area .meta');
    var should_set_height = meta.html() == "";
    
    var schedule = candidate_schedules[schedule_id];
    var html = [];
    
    if (!schedule.updating) {
      // Save/unsave button
      html.push('<div id="save-button" class="button button-right-margin" onclick="return generate.saveSchedule(');
      html.push(schedule_id);
      html.push(', false, ', (schedule.id ? 'true' : 'false'), ');">');
      html.push(schedule.id ? 'Unsave Schedule' : 'Save Schedule');
      html.push('</div>');
      
      // Set as main button
      if (!schedule.primary) {
        html.push('<div class="button button-right-margin" onclick="return generate.saveSchedule(');
        html.push(schedule_id);
        html.push(', true, false);">');
        html.push(schedule.id ? 'Set as Main Schedule' : 'Save as Main Schedule');
        html.push('</div>');
      }
      
      // Print button
      html.push('<div class="button button-right-margin" onclick="return generate.print(');
      html.push(schedule_id);
      html.push(');">Print</div>');
    }
    
    // Message
    html.push('<span class="bold">');
    if (schedule.message) {
      html.push(schedule.message);
    }
    else if (schedule.primary) {
      html.push("This is your main schedule.");
    }
    html.push('</span>');
    
    if (!schedule.id) {
      html.push('<div class="button-wrapper float-right">',
                '<a class="faded-text" href="#" onclick="generate.hideSchedule(', schedule_id, '); return false;">',
                'Hide This Schedule</a></div>');
    }
    
    html.push('<div class="clear-both"></div>');
    
    meta.html(html.join(''));
    
    if (should_set_height) {
      // Set a fixed height so when buttons go away it's not jumpy.
      meta.height(meta.height());
    }
  },
  
  saveSchedule: function(schedule_id, primary, unsave) {    
    var candidate_schedule = candidate_schedules[schedule_id];
    schedule = candidate_schedule;
    
    schedule.message = "Updating...";
    schedule.updating = true;
    generate.update_meta(schedule_id);
    
    if (candidate_schedule.id) { // Already saved.
      if (unsave) {
        // Drop
        $.post("/schedule/" + candidate_schedule.id + "/delete/", {},
               function(data) {
                 if (data.status == "success") {
                   schedule.id = null;
                   schedule.primary = false;
                   schedule.message = null;
                 }
                 else {
                   schedule.message = "Error unsaving schedule. Please try again.";
                 }
                 schedule.updating = false;
                 generate.update_meta(schedule_id);
               }
              );
      }
      else if (!candidate_schedule.primary) {
        // Set as primary
        $.post("/schedule/" + candidate_schedule.id + "/set_as_primary/", {},
               function(data) {
                 if (data.status == "success"){
                   schedule.primary = true;
                   schedule.message = null;
                 }
                 else {
                   schedule.message = "Error setting schedule as main. Please try again.";
                 }
                 schedule.updating = false;
                 generate.update_meta(schedule_id);
               }
              );
      }
    }
    else { // Not saved yet.
      var ids = [];
      var colors = [];
      var border_colors = [];
      for (var i = 0; i < candidate_schedule.entries.length; i++) {
        ids.push(candidate_schedule.entries[i].id);
        colors.push(candidate_schedule.entries[i].color);
        border_colors.push(candidate_schedule.entries[i].border_color);
      }
      
      // primary, id, message
      $.post("/schedule/save/", {section_ids: ids, colors: colors, border_colors: border_colors, primary: primary},
             function(data){
               if (data && data.message && data.status == "success") {
                 candidate_schedules[schedule_id].id = data.schedule_id;
                 candidate_schedules[schedule_id].primary = primary;
                 candidate_schedules[schedule_id].message = null;
               }
               else {
                 candidate_schedules[schedule_id].message = "Error saving schedule: " +
                   (data && data.message) ? data.message : "Unknown error";
               }
               schedule.updating = false;
               generate.update_meta(schedule_id);
             });
    }
  },
  
  // we need to pop up
  print: function(schedule_id) {
    var print_schedule;
    if (schedule_id !== undefined){
      print_schedule = candidate_schedules[schedule_id];
    } else {
      print_schedule = schedule;
    }
    var ids = [];
    var colors = [];
    for(var i=0;i<print_schedule.entries.length;i++) {
      ids.push(print_schedule.entries[i].id);
      colors.push([print_schedule.entries[i].color, print_schedule.entries[i].border_color].join(':'));
    }
    window.open("/schedule/print/?ids=" + ids.join('-') + "&colors=" + colors.join('-'), "print_window");
    return false;
  },
  
  checkboxClicked: function(checkbox, course_list_course_id, section_id){
    if($(checkbox).is(':checked')){
      var url = 'course_list_course/' + course_list_course_id + '/add_section/' + section_id + '/';
      $.post(url, {}, function(){});
    } else {
      var url = 'course_list_course/' + course_list_course_id + '/drop_section/' + section_id + '/';
      $.post(url, {}, function(){});
    }
  },
  
  checkAll: function(course_list_course_id) {
    var url = 'course_list_course/' + course_list_course_id + '/add_all/';
    $.post(url, {}, function(){});
    $(".section-checkbox").attr('checked', true);
    return false;
  },
  
  checkNone: function(course_list_course_id) {
    var url = 'course_list_course/' + course_list_course_id + '/drop_all/';
    $.post(url, {}, function(){});
    $(".section-checkbox").attr('checked', false);
    return false;
  },
  
  checkOpenSeats: function(course_list_course_id) {
    var url = 'course_list_course/' + course_list_course_id + '/add_open/';
    $.post(url, {}, function(){});
    $(".has_available_seats").attr('checked', true);
    $(".no_available_seats").attr('checked', false);
    return false;
  },
  
  CourseList: function(courses, groups) {
    this.courses = courses;
    this.groups = groups;
    this.last_viewed_clc = null;
    
    this.addCourse = function(course_id) {
      var url = 'course_list_course/' + course_id + '/add/';
      if (generate.cached_course_data[course_id] === undefined) {
        url += "?courseinfo=1&render_ratings=1";
      }
      generate.setIndicator();
      var me = this;
      $.post(url, {}, function(data){
        if (data.status == "success") {
          if (generate.cached_course_data[course_id] === undefined) {
            generate.cached_course_data[course_id] = data.course;
          }
          
          var i = 0, l = me.courses.length;
          while (i < l && !me.courses[i].custom) {
            i++;
          }
          
          me.courses.splice(i, 0, {id: data.id, course_id: data.course_id, display_string: data.display_string, selected: data.selected, group: data.group});
          me.render();
          
          $("#group-0-list").append('<li id="group-course-' + data.id + '">' + data.display_string + '</li>');
          $("#group-0-list").sortable('refresh');
          
          course_list.getSections(data.id, data.course_id);
          //generate.generate();
        } else {
          $("#schedule-pane-bottom").html('<div class="error">' + (data && data.message ? data.message : "An error has occurred.") + '</div>');
        }
      });
    };
    
    this.getSections = function(course_list_course_id, course_id) {
      this.last_viewed_clc = course_list_course_id;
      url = 'course_list_course/' + course_list_course_id + '/sections.json';
      if (generate.cached_course_data[course_id] === undefined) {
        url += "?courseinfo=1&render_ratings=1";
      }
      generate.setIndicator();
      $.getJSON(url, {},
                function(data) {
                  if (data.status == "success") {
                    course_data = generate.cached_course_data[course_id];
                    if (course_data === undefined) {
                      course_data = data.course;
                    }
                    course_data.status = 'success';
                    generate.display_course(course_data, data.sections, course_list_course_id);
                  }
                  else {
                    $("#schedule-pane-bottom").html('<div class="error">' + (data && data.message ? data.message : "An error has occurred.") + '</div>');
                  }
                }
               );
      return false;
    };
    
    this.dropCourse = function(course_list_course_id){
      var url = 'course_list_course/' + course_list_course_id + '/drop/';
      this.courses = $.grep(this.courses, function(item, i){
        return item.id != course_list_course_id;
      });
      
      $("#group-course-" + course_list_course_id).remove();
      $("#group-course-" + course_list_course_id).parent().sortable('refresh');
      this.update_groups(null, null);
      
      if (course_list_course_id == this.last_viewed_clc) {
        generate.clear_schedule_area();
      }
      
      this.render();
      $.post(url, {}, function(data){
        // hope it doesn't fail...
        //generate.generate();
      });
      return false;
    };

    this.update_course_selected = function(checkbox, course_list_course_id){
      var url = 'course_list_course/' + course_list_course_id + '/update/';
      for (var i = 0, l = this.courses.length; i < l; i++) {
        if (this.courses[i].id == course_list_course_id) {
          this.courses[i].selected = checkbox.checked;
        }
      }
      if (checkbox.checked) {
        url += "?selected=1";
      } else {
        url += "?selected=0";
      }
      $("#generate-submit").attr("value", "Updating...").attr("disabled", "disabled");
      $.post(url, {}, function(data){
        $("#generate-submit").attr("value", "Generate Schedules").attr("disabled", "");
      });
    };
    
    this.render = function() {
      if (this.courses.length > 0) {
        var courses = [];
        for (var i = 0, l = this.courses.length; i < l; i++) {
          courses.push('<div class="generate-courses-course"><div class="generate-courses-course-inner">');
          
          // Checkbox
          courses.push('<div style="margin-top: 1px;" class="middle float-left">');
          courses.push('<input type="checkbox" onclick="return course_list.update_course_selected(this, \'');
          courses.push(this.courses[i].id);
          courses.push('\');"');
          if (this.courses[i].selected){
            courses.push(' checked="checked"');
          }
          courses.push('/>');
          courses.push('</div>');
          
          // Course title
          courses.push('<div style="margin-left: 0.4em; max-width: 50%; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;" class="middle float-left">');
          courses.push(this.courses[i].display_string);
          courses.push('</div>');
          
          // Delete button
          courses.push('<div class="middle float-right">');
          courses.push('<a title="Delete" href="#" onclick="return course_list.dropCourse(\'');
          courses.push(this.courses[i].id);
          courses.push('\'); return false;"><img src="');
          courses.push(media_url);
          courses.push('images/icons/delete_2.png" width="16" height="16" alt="delete" /></a>');
          courses.push('</div>');
          
          if (this.courses[i].custom) {
            courses.push('<div class="float-right middle help-text" style="margin-right: 0.4em;">(custom)</div>');
          }
          else {
            // Course info link
            courses.push('<div class="float-right middle help-text" style="margin-right: 0.4em;">');
            courses.push('(<a href="/explore/course/');
            courses.push(this.courses[i].course_id);
            courses.push('/">info</a>)');
            courses.push('</div>');
            
            // Edit sections link
            courses.push('<div class="float-right middle help-text" style="margin-right: 0.4em;">');
            courses.push('(<a href="#" id="clc_');
            courses.push(this.courses[i].id);
            courses.push('" onclick="return course_list.getSections(');
            courses.push(this.courses[i].id);
            courses.push(',');
            courses.push(this.courses[i].course_id);
            courses.push('); return false;">sections</a>)');
            courses.push('</div>');
          }
          
          courses.push('<div class="clear-both"></div></div></div>');
        }
        courses.push(
          '<div style="margin-top: 0.8em;"><p><a href="#" onclick="return course_list.open_groups();">Group Courses</a></p>',
          '<p><a href="#" onclick="return course_list.open_custom();">Add a Custom Event</a></p></div>');
        $("#generate-courses").html(courses.join(''));
      } else {
        $("#generate-courses").html('<p>Add some courses by searching for them above or <a href="#" onclick="return course_list.open_custom();">add a custom event</a>.</p>');
      }
    };
    
    this.open_custom = function() {
      var html = ['<h3>Add Custom Event</h3><p>Add anything (for example, a meeting or lunch break) that you\'d like us to include in your schedules.</p>'];
      
      // Name
      html.push('<div class="custom-div"><label for="custom_name">Name</label><br/><input type="text" name="custom_name" id="custom_name" maxlength="32"/></div>');
      
      // Days of week
      html.push('<div class="custom-div">');
      var first = " day-check-first";
      var days = generate.days;
      for (var day in days) {
        html.push('<input type="checkbox" class="day-check', first, '" name="custom_day_', days[day], '" id="custom_day_', days[day], '" value="', days[day], '"/> <label for="custom_day_', days[day], '">', day, '</label> ');
        first = "";
      }
      html.push('</div>');
      
      // Start time and end time
      html.push('<div class="custom-div">', $('#custom_times_template').html(), '</div>');
      
      // Add button
      html.push('<div class="custom-div"><input type="submit" value="Add Event" id="custom_submit" onclick="return course_list.add_custom();"/> <span class="error" id="custom_error"></span></div>');
      
      $("#schedule-pane-bottom").html(html.join(''));
      return false;
    };
    
    this.add_custom = function() {
      $('#custom_error').empty();
      
      // Check for name.
      var name = $('#custom_name').val().replace(/^\s+|\s+$/g, '');
      if (name.length === 0) {
        $('#custom_error').html('Please enter a valid name.');
        return false;
      }
      
      // Calculate string for days of week.
      var selected_days = [];
      $('.day-check:checked').each(function(i, e) {
        selected_days.push(e.value);
      });
      var days = selected_days.join('');
      
      // Check for days of week.
      if (days == '') {
        $('#custom_error').html('Please select at least one day of the week.');
        return false;
      }
      
      // Check for start time.
      var start = $('#custom_start_time').val();
      if (start.length != 4) {
        $('#custom_error').html('Please select a start time.');
        return false;
      }
      
      // Check for end time.
      var end = $('#custom_end_time').val();
      if (end.length != 4) {
        $('#custom_error').html('Please select an end time.');
        return false;
      }
      
      // Save.
      var submit = $('#custom_submit');
      submit.attr('disabled', 'disabled');
      submit.val('Saving...');
      var url = "/schedule/course_list_course/add_custom/";
      $.post(url, {'name': name, 'days': days, 'start': start, 'end': end}, function(data) {
        if (data && data.status && data.status == "success") {
          generate.populate_schedule_area('<h3>Add Custom Event</h3><div class="success">Your event has been added.</div>');
          course_list.courses.push(data);
          course_list.render();
        }
        else {
          var message = data && data.message ? data.message : 'Error saving, please try again.';
          $('#custom_error').html(message);
          submit.removeAttr('disabled');
          submit.val('Add Event');
        }
      });
      
      return false;
    };

    this.open_groups = function() {
      var groups_html = ['<h3>Groups</h3>', '<p>Drag courses between groups to organize them. You can tell us how many courses you want us to pick from a group (other than the default one) to include in your schedule.</p>'];

      groups_html.push('<div class="button button-margin" onclick="return course_list.create_group();">New Group</div>');
      groups_html.push('<div class="button button-margin button-left-margin save" onclick="return course_list.save_groups();">Save</div>');
      
      var groups_cache = {'0': []};
      
      for (var i = 0, l = this.courses.length; i < l; i++) {
        if (this.courses[i].group){
          if(!(this.courses[i].group.id in groups_cache)) {
            groups_cache[this.courses[i].group.id] = [];
          }
          groups_cache[this.courses[i].group.id].push(this.courses[i]);
        } else {
          groups_cache[0].push(this.courses[i]);
        }
      }
      
      groups_html.push('<div id="groups">');
      groups_html.push(course_list.group_html(0, {'select_num': groups_cache[0].length, 'name': 'default'}, groups_cache[0]));
      for (var i=0; i< this.groups.length; i++) {
        if(this.groups[i].id in groups_cache) {
          groups_html.push(course_list.group_html(this.groups[i].id, this.groups[i], groups_cache[this.groups[i].id]));
        } else {
          groups_html.push(course_list.group_html(this.groups[i].id, this.groups[i]));
        }
      }
      groups_html.push('</div>'); // end class=groups
      groups_html.push('<div class="clear-both"></div>');
      
      groups_html.push('<div class="button button-margin" onclick="return course_list.create_group();">New Group</div>');
      groups_html.push('<div class="button button-margin button-left-margin save" onclick="return course_list.save_groups();">Save</div>');
      
      $("#schedule-pane-bottom").html(groups_html.join(''));
      
      $(".course-group").sortable('destroy').sortable({
        connectWith: '.course-group',
        receive: course_list.update_groups
      }).disableSelection();
      
      return false;
    };
    
    this.refresh_group = function(group_id) {
      $("#group-" + group_id + "-list").sortable('refresh');
    };
    
    this.update_course_group = function(course_list_course_id, group_id){
      var url = 'course_list_course/' + course_list_course_id + '/update/';
      url += "?group=" + group_id;
      $("#generate-submit").attr("value", "Updating...").attr("disabled", "disabled");
      $.post(url, {}, function(data){
        $("#generate-submit").attr("value", "Generate Schedules").attr("disabled", "");
      });
    };
    
    this.update_groups = function(event, ui){
      for (var i=0; i< course_list.groups.length; i++) {
        var max = $("#group-" + course_list.groups[i].id + "-list").children().length;
        $("#group-" + course_list.groups[i].id + " span").html(max.toString());
        if ($("#group-" + course_list.groups[i].id + "-select-num").attr('value') > max) {
          $("#group-" + course_list.groups[i].id + "-select-num").attr('value', max);
        }
      }
    };
    
    this.group_html = function(group_id, group, courses){
      courses = courses || [];
      var groups_html = ['<div class="group" id="group-', group_id, '">'];
      if(group_id === 0) {
        groups_html.push('<div class="group-select-num">Use all</div>');
      } else {
        groups_html.push('<div class="group-select-num">Use <input id="group-', group_id ,'-select-num" type="text" size="1" value="', group.select_num,'" /> of <span>', courses.length ,'</span></div>');
      }
      groups_html.push('<ul id="group-', group_id, '-list" class="course-group">');
      for (var i=0;i<courses.length;i++){
        groups_html.push('<li id="group-course-', courses[i].id, '">', courses[i].display_string, '</li>');
      }
      groups_html.push('</ul>');
      if (group_id !== 0) {
        groups_html.push('<a href="#" title="Delete" class="delete-group" onclick="return course_list.delete_group(', group_id,');">');
        groups_html.push('<img src="', media_url, 'images/icons/delete.png" width="16" height="16" alt="delete" />');
        groups_html.push('</a>');
      }
      groups_html.push('</div>');
      return groups_html.join('');
    };
    
    this.create_group = function(){
      var url = 'group/create/';
      $.post(url, {'name': 'default'}, function(data){
        if(data && data.status && data.status == "success") {
          course_list.groups.push(data.group);
          $("#groups").append(course_list.group_html(data.group.id, data.group));
          $("#group-" + data.group.id + "-list").sortable({
            connectWith: '.course-group',
            receive: course_list.update_groups
          }).disableSelection();
        } else {
          if (data && data.status != "success") {
            alert(data.message);
          }
        }
      });
      return false;
    };
    
    this.delete_group = function(group_id){
      $("#group-" + group_id + " .group-select-num").html('Deleting...');
      var url = 'group/delete/';
      $.post(url, {'id': group_id}, function(data){
        if(data && data.status && data.status == "success") {
          course_list.groups = $.grep(course_list.groups, function(item, i){
            return item.id != group_id;
          });
          
          for (var i=0;i<data.modified.length;i++){
            for (var j = 0; j<course_list.courses.length; j++) {
              if (course_list.courses[j].id == data.modified[j]) {
                course_list.courses[j].group = null;
                break;
              }
            }
          }
          
          $("#group-0-list").append($("#group-" + group_id + "-list").html());
          $("#group-" + group_id).remove();
          $("#group-" + group_id + "-list").sortable('destroy');
          $("#group-0-list").sortable('refresh');
        }
      });
      return false;
    };

    this.save_groups = function(){
      $(".save").html("Saving...");
      
      $(".group").sortable('destroy');
      var args = {'clc_groups': [], 'groups': []};
      course_list.groups.push({'id': 0, 'select_num': 0});
      for (var i=0; i< course_list.groups.length; i++) {
        var g_id = course_list.groups[i].id;

        if(g_id !== 0){
          course_list.groups[i].select_num = $("#group-" + g_id + "-select-num").attr('value');
          args.groups.push({'id': g_id, 'value': course_list.groups[i].select_num});
        }
        
        var children = $("#group-" + g_id + "-list").children();
        for (var j=0; j<children.length;j++){
          var clc_id = $(children[j]).attr("id").split('-')[2];
          args.clc_groups.push({'clc_id': clc_id, 'g_id': g_id});
          // update group in course list
          for (var k = 0; k<course_list.courses.length; k++) {
            if (course_list.courses[k].id == clc_id) {
              if(g_id === 0){
                course_list.courses[k].group = null;
              } else {
                course_list.courses[k].group = course_list.groups[i];
              }
              break;
            }
          }
        }
      }
      course_list.groups.pop();
      var url = 'group/update_all/';
      $.post(url, {"arg": JSON.stringify(args)}, function(data){
        if(data && data.status && data.status == "success") {
          generate.populate_schedule_area('<h3>Groups</h3><div class="success">Groups have been saved.</div>');
        }
      });
      return false;
    };
  }
};

$(generate.init);
